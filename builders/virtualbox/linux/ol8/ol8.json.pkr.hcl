variable "memsize" {
  type    = string
  default = "8096"
}

variable "numvcpus" {
  type    = string
  default = "1"
}

variable "bridge_adapter" {
  type    = string
  default = "Marvell AQtion 5Gbit Network Adapter"
}

variable "output_directory"{
  type    = string
  default = "E://Servers/Virtualbox/packer-virtualbox-ol8"
}

variable "iso_url"{
  type    = string
  default = "F://ISOS/Linux/OracleLinux-R8-U4-x86_64-dvd.iso"
}

#https://linux.oracle.com/security/gpg/checksum/OracleLinux-R8-U4-Server-x86_64.checksum
variable "iso_checksum"{
  type    = string
  default = "a55e97eec90e8c810f23625a349af816e1fdf162428e2bf96b752ff562106d4b"
}

variable "ssh_host"{
  type    = string
  default = "192.168.0.133"
}

variable "ssh_username"{
  type    = string
  default = "provision"
}

variable "ssh_password"{
  type    = string
  default = "provision"
}

source "virtualbox-iso" "autogenerated_1" {
  boot_command     = ["e<down><down><end><bs><bs><bs><bs><bs>text ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/ks.cfg<leftCtrlOn>x<leftCtrlOff>"]
  boot_wait        = "10s"
  disk_size        = "60000"
  guest_os_type    = "RedHat_64"
  headless         = false
  http_directory   = "http"
  iso_checksum     = "${var.iso_checksum}"
  iso_url          = "${var.iso_url}"
  keep_registered  = "true"
  output_directory = "${var.output_directory}"
  shutdown_command = "echo 'provision'|sudo -S /sbin/halt -h -p"
  ssh_port         = 22
  ssh_timeout      = "20m"
  ssh_host         = "${var.ssh_host}"
  ssh_username     = "${var.ssh_username}"
  ssh_password     = "${var.ssh_password}"
  vm_name          = "ol8-${legacy_isotime("2006-01-02")}"
  vboxmanage       = [
    ["modifyvm", "{{ .Name }}", "--firmware", "EFI"],
    ["modifyvm", "{{ .Name }}", "--spec-ctrl", "on"],
    ["modifyvm", "{{ .Name }}", "--triplefaultreset", "on"],
    ["modifyvm", "{{ .Name }}", "--hwvirtex", "on"],
    ["modifyvm", "{{ .Name }}", "--cpus", "${var.numvcpus}"],
    ["modifyvm", "{{ .Name }}", "--memory", "${var.memsize}"],
    ["modifyvm", "{{.Name}}", "--nic2", "bridged"],
    ["modifyvm", "{{.Name}}", "--bridgeadapter2", "${var.bridge_adapter}"],
    ["modifyvm", "{{.Name}}", "--cableconnected2", "on"]
  ]
}

build {
  sources = ["source.virtualbox-iso.autogenerated_1"]
  # provisioner "shell" {
  #   execute_command = "echo 'provision' | {{ .Vars }} sudo -S -E bash '{{ .Path }}'"
  #   scripts         = ["scripts/foo.sh"]
  # }
}

